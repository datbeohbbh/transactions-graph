// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: listener.proto

package listener

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlockListenerClient is the client API for BlockListener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockListenerClient interface {
	AddAddress(ctx context.Context, in *Address, opts ...grpc.CallOption) (*AddResp, error)
}

type blockListenerClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockListenerClient(cc grpc.ClientConnInterface) BlockListenerClient {
	return &blockListenerClient{cc}
}

func (c *blockListenerClient) AddAddress(ctx context.Context, in *Address, opts ...grpc.CallOption) (*AddResp, error) {
	out := new(AddResp)
	err := c.cc.Invoke(ctx, "/listener.BlockListener/AddAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockListenerServer is the server API for BlockListener service.
// All implementations must embed UnimplementedBlockListenerServer
// for forward compatibility
type BlockListenerServer interface {
	AddAddress(context.Context, *Address) (*AddResp, error)
	mustEmbedUnimplementedBlockListenerServer()
}

// UnimplementedBlockListenerServer must be embedded to have forward compatible implementations.
type UnimplementedBlockListenerServer struct {
}

func (UnimplementedBlockListenerServer) AddAddress(context.Context, *Address) (*AddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAddress not implemented")
}
func (UnimplementedBlockListenerServer) mustEmbedUnimplementedBlockListenerServer() {}

// UnsafeBlockListenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockListenerServer will
// result in compilation errors.
type UnsafeBlockListenerServer interface {
	mustEmbedUnimplementedBlockListenerServer()
}

func RegisterBlockListenerServer(s grpc.ServiceRegistrar, srv BlockListenerServer) {
	s.RegisterService(&BlockListener_ServiceDesc, srv)
}

func _BlockListener_AddAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockListenerServer).AddAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/listener.BlockListener/AddAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockListenerServer).AddAddress(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

// BlockListener_ServiceDesc is the grpc.ServiceDesc for BlockListener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlockListener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "listener.BlockListener",
	HandlerType: (*BlockListenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAddress",
			Handler:    _BlockListener_AddAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "listener.proto",
}
