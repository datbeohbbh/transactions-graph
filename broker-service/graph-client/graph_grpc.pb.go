// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: graph.proto

package graph

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GraphDataClient is the client API for GraphData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GraphDataClient interface {
	GetAllVertex(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Vertices, error)
	GetVertexByAddress(ctx context.Context, in *VertexRequest, opts ...grpc.CallOption) (*Vertex, error)
}

type graphDataClient struct {
	cc grpc.ClientConnInterface
}

func NewGraphDataClient(cc grpc.ClientConnInterface) GraphDataClient {
	return &graphDataClient{cc}
}

func (c *graphDataClient) GetAllVertex(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Vertices, error) {
	out := new(Vertices)
	err := c.cc.Invoke(ctx, "/graph.GraphData/GetAllVertex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphDataClient) GetVertexByAddress(ctx context.Context, in *VertexRequest, opts ...grpc.CallOption) (*Vertex, error) {
	out := new(Vertex)
	err := c.cc.Invoke(ctx, "/graph.GraphData/GetVertexByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GraphDataServer is the server API for GraphData service.
// All implementations must embed UnimplementedGraphDataServer
// for forward compatibility
type GraphDataServer interface {
	GetAllVertex(context.Context, *Empty) (*Vertices, error)
	GetVertexByAddress(context.Context, *VertexRequest) (*Vertex, error)
	mustEmbedUnimplementedGraphDataServer()
}

// UnimplementedGraphDataServer must be embedded to have forward compatible implementations.
type UnimplementedGraphDataServer struct {
}

func (UnimplementedGraphDataServer) GetAllVertex(context.Context, *Empty) (*Vertices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllVertex not implemented")
}
func (UnimplementedGraphDataServer) GetVertexByAddress(context.Context, *VertexRequest) (*Vertex, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVertexByAddress not implemented")
}
func (UnimplementedGraphDataServer) mustEmbedUnimplementedGraphDataServer() {}

// UnsafeGraphDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GraphDataServer will
// result in compilation errors.
type UnsafeGraphDataServer interface {
	mustEmbedUnimplementedGraphDataServer()
}

func RegisterGraphDataServer(s grpc.ServiceRegistrar, srv GraphDataServer) {
	s.RegisterService(&GraphData_ServiceDesc, srv)
}

func _GraphData_GetAllVertex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphDataServer).GetAllVertex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graph.GraphData/GetAllVertex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphDataServer).GetAllVertex(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphData_GetVertexByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VertexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphDataServer).GetVertexByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graph.GraphData/GetVertexByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphDataServer).GetVertexByAddress(ctx, req.(*VertexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GraphData_ServiceDesc is the grpc.ServiceDesc for GraphData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GraphData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "graph.GraphData",
	HandlerType: (*GraphDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllVertex",
			Handler:    _GraphData_GetAllVertex_Handler,
		},
		{
			MethodName: "GetVertexByAddress",
			Handler:    _GraphData_GetVertexByAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "graph.proto",
}
