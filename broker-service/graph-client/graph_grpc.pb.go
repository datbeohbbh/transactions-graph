// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: graph.proto

package graph

import (
	context "context"
	graphAlgo "github.com/datbeohbbh/transactions-graph/broker/graphAlgo"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GraphDataClient is the client API for GraphData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GraphDataClient interface {
	GetVertexByAddress(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Vertex, error)
	GetAllVertex(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Vertices, error)
	GetVertexByAccountType(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Vertices, error)
	GetTxByObjectID(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Tx, error)
	GetTxByTxHash(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Txs, error)
	GetTxByAddress(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Txs, error)
	GetTxByBlockNumber(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Txs, error)
	GetTxByEdgeDirection(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Txs, error)
	GetTxByFilter(ctx context.Context, in *Filters, opts ...grpc.CallOption) (*Txs, error)
	GetGraphRenderData(ctx context.Context, in *graphAlgo.Query, opts ...grpc.CallOption) (*graphAlgo.GraphRenderData, error)
}

type graphDataClient struct {
	cc grpc.ClientConnInterface
}

func NewGraphDataClient(cc grpc.ClientConnInterface) GraphDataClient {
	return &graphDataClient{cc}
}

func (c *graphDataClient) GetVertexByAddress(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Vertex, error) {
	out := new(Vertex)
	err := c.cc.Invoke(ctx, "/graph.GraphData/GetVertexByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphDataClient) GetAllVertex(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Vertices, error) {
	out := new(Vertices)
	err := c.cc.Invoke(ctx, "/graph.GraphData/GetAllVertex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphDataClient) GetVertexByAccountType(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Vertices, error) {
	out := new(Vertices)
	err := c.cc.Invoke(ctx, "/graph.GraphData/GetVertexByAccountType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphDataClient) GetTxByObjectID(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Tx, error) {
	out := new(Tx)
	err := c.cc.Invoke(ctx, "/graph.GraphData/GetTxByObjectID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphDataClient) GetTxByTxHash(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Txs, error) {
	out := new(Txs)
	err := c.cc.Invoke(ctx, "/graph.GraphData/GetTxByTxHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphDataClient) GetTxByAddress(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Txs, error) {
	out := new(Txs)
	err := c.cc.Invoke(ctx, "/graph.GraphData/GetTxByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphDataClient) GetTxByBlockNumber(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Txs, error) {
	out := new(Txs)
	err := c.cc.Invoke(ctx, "/graph.GraphData/GetTxByBlockNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphDataClient) GetTxByEdgeDirection(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Txs, error) {
	out := new(Txs)
	err := c.cc.Invoke(ctx, "/graph.GraphData/GetTxByEdgeDirection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphDataClient) GetTxByFilter(ctx context.Context, in *Filters, opts ...grpc.CallOption) (*Txs, error) {
	out := new(Txs)
	err := c.cc.Invoke(ctx, "/graph.GraphData/GetTxByFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphDataClient) GetGraphRenderData(ctx context.Context, in *graphAlgo.Query, opts ...grpc.CallOption) (*graphAlgo.GraphRenderData, error) {
	out := new(graphAlgo.GraphRenderData)
	err := c.cc.Invoke(ctx, "/graph.GraphData/GetGraphRenderData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GraphDataServer is the server API for GraphData service.
// All implementations must embed UnimplementedGraphDataServer
// for forward compatibility
type GraphDataServer interface {
	GetVertexByAddress(context.Context, *Query) (*Vertex, error)
	GetAllVertex(context.Context, *Empty) (*Vertices, error)
	GetVertexByAccountType(context.Context, *Query) (*Vertices, error)
	GetTxByObjectID(context.Context, *Query) (*Tx, error)
	GetTxByTxHash(context.Context, *Query) (*Txs, error)
	GetTxByAddress(context.Context, *Query) (*Txs, error)
	GetTxByBlockNumber(context.Context, *Query) (*Txs, error)
	GetTxByEdgeDirection(context.Context, *Query) (*Txs, error)
	GetTxByFilter(context.Context, *Filters) (*Txs, error)
	GetGraphRenderData(context.Context, *graphAlgo.Query) (*graphAlgo.GraphRenderData, error)
	mustEmbedUnimplementedGraphDataServer()
}

// UnimplementedGraphDataServer must be embedded to have forward compatible implementations.
type UnimplementedGraphDataServer struct {
}

func (UnimplementedGraphDataServer) GetVertexByAddress(context.Context, *Query) (*Vertex, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVertexByAddress not implemented")
}
func (UnimplementedGraphDataServer) GetAllVertex(context.Context, *Empty) (*Vertices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllVertex not implemented")
}
func (UnimplementedGraphDataServer) GetVertexByAccountType(context.Context, *Query) (*Vertices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVertexByAccountType not implemented")
}
func (UnimplementedGraphDataServer) GetTxByObjectID(context.Context, *Query) (*Tx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxByObjectID not implemented")
}
func (UnimplementedGraphDataServer) GetTxByTxHash(context.Context, *Query) (*Txs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxByTxHash not implemented")
}
func (UnimplementedGraphDataServer) GetTxByAddress(context.Context, *Query) (*Txs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxByAddress not implemented")
}
func (UnimplementedGraphDataServer) GetTxByBlockNumber(context.Context, *Query) (*Txs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxByBlockNumber not implemented")
}
func (UnimplementedGraphDataServer) GetTxByEdgeDirection(context.Context, *Query) (*Txs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxByEdgeDirection not implemented")
}
func (UnimplementedGraphDataServer) GetTxByFilter(context.Context, *Filters) (*Txs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxByFilter not implemented")
}
func (UnimplementedGraphDataServer) GetGraphRenderData(context.Context, *graphAlgo.Query) (*graphAlgo.GraphRenderData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGraphRenderData not implemented")
}
func (UnimplementedGraphDataServer) mustEmbedUnimplementedGraphDataServer() {}

// UnsafeGraphDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GraphDataServer will
// result in compilation errors.
type UnsafeGraphDataServer interface {
	mustEmbedUnimplementedGraphDataServer()
}

func RegisterGraphDataServer(s grpc.ServiceRegistrar, srv GraphDataServer) {
	s.RegisterService(&GraphData_ServiceDesc, srv)
}

func _GraphData_GetVertexByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphDataServer).GetVertexByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graph.GraphData/GetVertexByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphDataServer).GetVertexByAddress(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphData_GetAllVertex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphDataServer).GetAllVertex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graph.GraphData/GetAllVertex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphDataServer).GetAllVertex(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphData_GetVertexByAccountType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphDataServer).GetVertexByAccountType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graph.GraphData/GetVertexByAccountType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphDataServer).GetVertexByAccountType(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphData_GetTxByObjectID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphDataServer).GetTxByObjectID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graph.GraphData/GetTxByObjectID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphDataServer).GetTxByObjectID(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphData_GetTxByTxHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphDataServer).GetTxByTxHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graph.GraphData/GetTxByTxHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphDataServer).GetTxByTxHash(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphData_GetTxByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphDataServer).GetTxByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graph.GraphData/GetTxByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphDataServer).GetTxByAddress(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphData_GetTxByBlockNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphDataServer).GetTxByBlockNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graph.GraphData/GetTxByBlockNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphDataServer).GetTxByBlockNumber(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphData_GetTxByEdgeDirection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphDataServer).GetTxByEdgeDirection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graph.GraphData/GetTxByEdgeDirection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphDataServer).GetTxByEdgeDirection(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphData_GetTxByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphDataServer).GetTxByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graph.GraphData/GetTxByFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphDataServer).GetTxByFilter(ctx, req.(*Filters))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphData_GetGraphRenderData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(graphAlgo.Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphDataServer).GetGraphRenderData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graph.GraphData/GetGraphRenderData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphDataServer).GetGraphRenderData(ctx, req.(*graphAlgo.Query))
	}
	return interceptor(ctx, in, info, handler)
}

// GraphData_ServiceDesc is the grpc.ServiceDesc for GraphData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GraphData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "graph.GraphData",
	HandlerType: (*GraphDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVertexByAddress",
			Handler:    _GraphData_GetVertexByAddress_Handler,
		},
		{
			MethodName: "GetAllVertex",
			Handler:    _GraphData_GetAllVertex_Handler,
		},
		{
			MethodName: "GetVertexByAccountType",
			Handler:    _GraphData_GetVertexByAccountType_Handler,
		},
		{
			MethodName: "GetTxByObjectID",
			Handler:    _GraphData_GetTxByObjectID_Handler,
		},
		{
			MethodName: "GetTxByTxHash",
			Handler:    _GraphData_GetTxByTxHash_Handler,
		},
		{
			MethodName: "GetTxByAddress",
			Handler:    _GraphData_GetTxByAddress_Handler,
		},
		{
			MethodName: "GetTxByBlockNumber",
			Handler:    _GraphData_GetTxByBlockNumber_Handler,
		},
		{
			MethodName: "GetTxByEdgeDirection",
			Handler:    _GraphData_GetTxByEdgeDirection_Handler,
		},
		{
			MethodName: "GetTxByFilter",
			Handler:    _GraphData_GetTxByFilter_Handler,
		},
		{
			MethodName: "GetGraphRenderData",
			Handler:    _GraphData_GetGraphRenderData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "graph.proto",
}
