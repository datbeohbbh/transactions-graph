// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: address.proto

package address

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AddressManagerClient is the client API for AddressManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddressManagerClient interface {
	AddAddress(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Response, error)
	RemoveAddress(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Response, error)
	IsTracking(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Response, error)
	AccountType(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Type, error)
}

type addressManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewAddressManagerClient(cc grpc.ClientConnInterface) AddressManagerClient {
	return &addressManagerClient{cc}
}

func (c *addressManagerClient) AddAddress(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/address.AddressManager/AddAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressManagerClient) RemoveAddress(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/address.AddressManager/RemoveAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressManagerClient) IsTracking(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/address.AddressManager/IsTracking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressManagerClient) AccountType(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Type, error) {
	out := new(Type)
	err := c.cc.Invoke(ctx, "/address.AddressManager/AccountType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddressManagerServer is the server API for AddressManager service.
// All implementations must embed UnimplementedAddressManagerServer
// for forward compatibility
type AddressManagerServer interface {
	AddAddress(context.Context, *Address) (*Response, error)
	RemoveAddress(context.Context, *Address) (*Response, error)
	IsTracking(context.Context, *Address) (*Response, error)
	AccountType(context.Context, *Address) (*Type, error)
	mustEmbedUnimplementedAddressManagerServer()
}

// UnimplementedAddressManagerServer must be embedded to have forward compatible implementations.
type UnimplementedAddressManagerServer struct {
}

func (UnimplementedAddressManagerServer) AddAddress(context.Context, *Address) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAddress not implemented")
}
func (UnimplementedAddressManagerServer) RemoveAddress(context.Context, *Address) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAddress not implemented")
}
func (UnimplementedAddressManagerServer) IsTracking(context.Context, *Address) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsTracking not implemented")
}
func (UnimplementedAddressManagerServer) AccountType(context.Context, *Address) (*Type, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountType not implemented")
}
func (UnimplementedAddressManagerServer) mustEmbedUnimplementedAddressManagerServer() {}

// UnsafeAddressManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddressManagerServer will
// result in compilation errors.
type UnsafeAddressManagerServer interface {
	mustEmbedUnimplementedAddressManagerServer()
}

func RegisterAddressManagerServer(s grpc.ServiceRegistrar, srv AddressManagerServer) {
	s.RegisterService(&AddressManager_ServiceDesc, srv)
}

func _AddressManager_AddAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressManagerServer).AddAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/address.AddressManager/AddAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressManagerServer).AddAddress(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressManager_RemoveAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressManagerServer).RemoveAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/address.AddressManager/RemoveAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressManagerServer).RemoveAddress(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressManager_IsTracking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressManagerServer).IsTracking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/address.AddressManager/IsTracking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressManagerServer).IsTracking(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressManager_AccountType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressManagerServer).AccountType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/address.AddressManager/AccountType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressManagerServer).AccountType(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

// AddressManager_ServiceDesc is the grpc.ServiceDesc for AddressManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AddressManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "address.AddressManager",
	HandlerType: (*AddressManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAddress",
			Handler:    _AddressManager_AddAddress_Handler,
		},
		{
			MethodName: "RemoveAddress",
			Handler:    _AddressManager_RemoveAddress_Handler,
		},
		{
			MethodName: "IsTracking",
			Handler:    _AddressManager_IsTracking_Handler,
		},
		{
			MethodName: "AccountType",
			Handler:    _AddressManager_AccountType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "address.proto",
}
